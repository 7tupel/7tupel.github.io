<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>7tupel.github.io</title>
  <link href="https://blog.7tupel.net/atom.xml" rel="self"/>
  <link href="https://blog.7tupel.net/"/>
  <updated>2024-01-23T10:32:12+00:00</updated>
  <id>https://blog.7tupel.net/</id>
  <author>
    <name>Moritz Moxter</name>
  </author>
  <entry>
    <id>https://blog.7tupel.net/freelancer-rates.html</id>
    <link href="https://blog.7tupel.net/freelancer-rates.html"/>
    <title>How a Freelancer calculates his rate</title>
    <updated>2024-01-22T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<p>I have worked most of my career as either a self employed freelancer or in a small company I founded together with other developers. In addition to building software and managing projects I was responsible to work the sometimes rather boring yet necessary bureaucracy stack. One of the things I had to do was financial planning including contrasting income and cost. This would also include setting the hourly rates that I had to charge to our customers. After the big recession in 2023 has also reached the IT industrie the willingness to pay high rates to contractors has - understandably - diminished. But still, I sometimes wonder how companies expect to find any contractor given the somewhat insulting rates these companies offer.</p><p><i>As a quick Disclaimer, I worked on several projects for different customers in the past years and the statements in this article are based on the experiences I have collected in this time. And as I live in Germany all calculations (i.e. taxes) are based on the German laws and cost living in Germany.</i></p><h2>The Proposition</h2><p>Many of the job offerings sound something like this:</p><p><i>We are looking for a freelance Software Developer with at least eight years of experience with [insert some technologies] and profound knowledge of [insert more tech]. Remote work possible with up to two weeks a month on site. We offer a generous payment of up to 60€ per hour (including all expenses).</i></p><p>The last sentence usually means that they are not paying extra for your travelling cost and they expect you not to charge the time spent travelling. And most times the "up to" rate is only when working on site. The time working remote is usually about 10-20% below that (in this example it would then be 48€ per hour). </p><p>The "high" rate of 60€/48€ per hour first may seem a lot to those who are not doing freelance work but are instead in a fulltime employment. But please let me explain why this is not the case and why I would consider such low rates as outrageous.</p><h2>Actual Days of Work</h2><p>Lets start with a simple calculation. A year has in average 365 days with 52 weeks per year with weekends as work free days. In addition here in Germany we have an average of 11 official holidays. Then we would like to have 30 days of holidays (common in Germany for fulltime employments) and about 25 sick days on which we cannot work (if you have children the number of sickdays will be a lot higher!).</p><table><thead><tr><th style='text-align:left'>what</th><th>days</th></tr></thead><tbody><tr><td style='text-align:left'>Year Total</td><td>365</td></tr><tr><td style='text-align:left'>Weekend days</td><td>104</td></tr><tr><td style='text-align:left'>German Holidays</td><td>11</td></tr><tr><td style='text-align:left'>Work Holidays</td><td>30</td></tr><tr><td style='text-align:left'>Sick Days</td><td>25</td></tr></tbody></table><p><br /> <strong>Total remaining working days</strong>: 195 <br /></p><p>Lets assume that a freelancer would work all those days full time (8 hours per day). This would indeed yield in a yearly income of 74.880€ assuming the hourly rate of 48€. This doesn't sound too bad compared to the average income in Germany. Comparing it with the income of full time employed software developers it would not be top notch but still not too bad. No problem there, right?</p><p>Well, unfortunately quite a few things are still missing to get a realistic calculation.</p><p>First, the result of a total of 195 working days does not fit. First, you cannot not sell all working days to customers. You still need time to do the "non productive" work. This includes tasks like accounting, acquiring new customers, meeting with a potential customer and creating an offering for the project and many other things. Also as a freelancer in the software development domain you need to keep up and spend time on learning new skills and technologies. From my experience, you should spend about 5-10% of your time building new skills. Dealing with all the other "non productive" tasks will again take about 10-20% of your time. Lets look at the result taking this into account: </p><!-- 195 days - 5% education - 10% non productive work = **165 days** (best case) --> 195 days - 10% education - 20% non productive work = <strong>137 days</strong> (expected case)</p><p>Well, taking these remaining "productive" working days and selling them to customers will only yield 52.600€.</p><h2>Let's talk about Expenses</h2><p>But that is only the total income, not the money you can put in your pocket at the end of the year. Now lets talk about expenses. Fortunately working as a software developer does not require expensive machinery or large production halls. But still, you need at least a computer and a phone, internet access, licenses (software, developer membership, ...) an office space (including furniture), some insurance, a tax consultant and other fees you have to pay. Lets sum up the minimal cost:</p><table><thead><tr><th style='text-align:left'>expense</th><th></th><th style='text-align:right'>monthly expense</th><th></th><th style='text-align:right'>yearly expense</th></tr></thead><tbody><tr><td style='text-align:left'>office rent</td><td>&nbsp;</td><td style='text-align:right'>300€</td><td>&nbsp;</td><td style='text-align:right'>3.600€</td></tr><tr><td style='text-align:left'>internet & phone</td><td></td><td style='text-align:right'>100€</td><td></td><td style='text-align:right'>1.200€</td></tr><tr><td style='text-align:left'>mobility</td><td></td><td style='text-align:right'>50€</td><td></td><td style='text-align:right'>600€</td></tr><tr><td style='text-align:left'>hardware</td><td></td><td style='text-align:right'></td><td></td><td style='text-align:right'>2.000€</td></tr><tr><td style='text-align:left'>licenses</td><td></td><td style='text-align:right'></td><td></td><td style='text-align:right'>500€</td></tr><tr><td style='text-align:left'>insurance</td><td></td><td style='text-align:right'></td><td></td><td style='text-align:right'>1.500€</td></tr><tr><td style='text-align:left'>other purchases</td><td></td><td style='text-align:right'></td><td></td><td style='text-align:right'>1.000€</td></tr><tr><td style='text-align:left'>other fees</td><td></td><td style='text-align:right'></td><td></td><td style='text-align:right'>1.000€</td></tr></tbody></table><p><br /> <strong>Total expenses</strong>: 11.400€ <br /></p><p>Thats a lot. Now you can argue that you could save some money and keep expenses lower than the listing above. But even if you are thrifty or work exclusively from home you still need to pay most of these expenses. After these expenses you will be left with the following revenue after expenses:</p><!-- **Best case**: 63.360€ - 11.400€ = 51.960€ <br /> --> 52.600€ - 11.400€ = <strong>41.200€</strong></p><h2>Don't forget to put Money in your Pillow</h2><p>And you still cannot take this money and spend it on toys and chocolate. Because you need at least to use some of the revenue and put it aside for bad times. Because there is no guarantee that you will always have a paying client. You will have time between contracts in which you will have no income. You may get sick long term. You may become a parent and want to spend time with your family. And a thousand more things that will leave you with no income over an extended time period. As such I would recommend to take at least 10% of your revenue and put it aside. Which will settle the total amount of money left each year to </p><p>41.200€ - 10% = <strong>37.000€</strong></p><h2>Fees and Taxes to top it all</h2><p>Now lets pay social fees. In Germany you have at least to pay your health insurance and you really should pay pension insurance. A fulltime employee in Germany pays about 20% of his gross income for those. And the employer pays an additional 20% of the employees salary for this. As a freelancer you need to pay both the employee and the employer share of the insurance fees. And then of cause you need to pay your personal taxes for the salary. Again lets to some final math:</p><p>37.000€ - 40% (health + pension insurance) - taxes = <strong>18.000€ overall net income</strong> </p><p>Thats not much. In comparison a full time employee earning a gross total salary of 70.000€ would get the overall net income of about 43.000€. That is more than twice as much!</p><h2>What now?</h2><p>Now the interesting question: What hourly rate do you need to get the same net income as a freelancer given the expenses and cost as described above? Doing some backwards calculations will yield an hourly rate of <strong>108€</strong>. Thats more than twice the rate the job offering advertises!</p><h2>Conclusion</h2><p>Taking the hourly rates many companies offer in their job anouncements, it is simply impossible to earn the money required to feed a family here in Germany. And I might add that the companies offering such low rates are by far not just located in countries that migh have lower living cost as compared to Germany. There are more than enough companies that reside within Germany offering such insulting rates.</p><p>For everyone who might think of becomming a Freelancer, please do not just accept such offers. Think twice and calculate the rates you need to make a living. Otherwise you won't be able to pay your rent and the companies will continue and even intensify such practices.</p><h2>Calculations</h2><p>Please note that all example calculations here are quite rough and real world calculation that i.e. a tax consultant would do will vary from the numbers in the example. Yet the precision in the example is more than enough to present my actual point on the topic.</p><p>I used following code snippets to calculate the numbers I have been talking about in this post. Please feel free to use the code to do some calculations by yourself and change the numbers according to your needs. For example the calculation does not take into account stuff like other Steuerklassen (~tax levels) or having children.</p><pre><code class="lang-clojure">&#40;def low-hourly-rate 48&#41;
&#40;def working-hours-per-day 8&#41;

&#40;def days-per-year 365&#41;
&#40;def weekend-days-per-year 104&#41;
&#40;def german-holidays-per-year 11&#41;
&#40;def work-holidays 30&#41;
&#40;def sick-days 25&#41;

&#40;def education-proportion 0.1&#41;
&#40;def non-productive-work-proportion 0.2&#41;

&#40;def expenses
  &#91;&#91;&quot;office rent&quot; :monthly 300&#93;
   &#91;&quot;internet &amp; phone&quot; :monthly 100&#93;
   &#91;&quot;mobility&quot; :monthly 50&#93;
   &#91;&quot;hardware&quot; :yearly 2000&#93;
   &#91;&quot;licenses&quot; :yearly 500&#93;
   &#91;&quot;insurance&quot; :yearly 1500&#93;
   &#91;&quot;other purchases&quot; :yearly 1000&#93;
   &#91;&quot;other fees&quot; :yearly 1000&#93;&#93;&#41;

&#40;def revenue-reserve-proportion 0.1&#41;

&#40;def health-insurance-employer-rate 0.073&#41;
&#40;def health-insurance-employee-rate 0.073&#41;
&#40;def pension-insurance-employer-rate 0.093&#41;
&#40;def pension-insurance-employee-rate 0.093&#41;
&#40;def unemployment-insurance-employee-rate 0.013&#41;
&#40;def unemployment-insurance-employer-rate 0.013&#41;
&#40;def bbg-pension-2023 90600&#41;
&#40;def bbg-health-2023 62100&#41;

&#40;defn- social-fee
  &#91;income rate bbg&#93;
  &#40;if &#40;&gt;= income bbg&#41;
      &#40;&#42; bbg rate&#41;
      &#40;&#42; income rate&#41;&#41;&#41;

&#40;defn health-insurance-fee-employee
  &#91;income&#93;
  &#40;social-fee income health-insurance-employee-rate bbg-health-2023&#41;&#41;

&#40;defn health-insurance-fee-employer
  &#91;income&#93;
  &#40;social-fee income health-insurance-employer-rate bbg-health-2023&#41;&#41;

&#40;defn pension-insurance-fee-employee
  &#91;income&#93;
  &#40;social-fee income pension-insurance-employee-rate bbg-pension-2023&#41;&#41;

&#40;defn pension-insurance-fee-employer
  &#91;income&#93;
  &#40;social-fee income pension-insurance-employer-rate bbg-pension-2023&#41;&#41;

&#40;defn unemployment-insurance-fee-employee
  &#91;income&#93;
  &#40;social-fee income unemployment-insurance-employee-rate income&#41;&#41;

&#40;defn unemployment-insurance-fee-employer
  &#91;income&#93;
  &#40;social-fee income unemployment-insurance-employer-rate income&#41;&#41;

&#40;defn income-tax
  &quot;Based on German income tax of 2023 for Steuerklasse I.
   Source:
   https://www.bmf-steuerrechner.de/ekst/eingabeformekst.xhtml?ekst-result=true
  &quot;
  &#91;zve&#93;
  &#40;cond
    &#40;&lt; zve 10908&#41;
    0.0
    &#40;&lt; zve 15999&#41;
    &#40;let &#91;y &#40;/ &#40;- zve 10908&#41; 10000&#41;&#93;
      &#40;&#42; &#40;+ &#40;&#42; 979.18 y&#41; 1400&#41; y&#41;&#41;
    &#40;&lt; zve 62809&#41;
    &#40;let &#91;z &#40;/ &#40;- zve 15999&#41; 10000&#41;&#93;
      &#40;+ &#40;&#42; &#40;+ &#40;&#42; 192.59 z&#41; 2397&#41; z&#41; 966.53&#41;&#41;
    &#40;&lt; zve 277825&#41;
    &#40;- &#40;&#42; zve 0.42&#41; 9972.98&#41;
    &#40;&gt;= zve 277826&#41;
    &#40;- &#40;&#42; zve 0.45&#41; 18307.73&#41;&#41;&#41;

&#40;defn freelancer-salary-gross-&gt;net
  &quot;Get the net salary of a freelancer from her gross salary.
   This is salary - social insurance - taxes. Because freelancers
   don't have a regular employer they have to pay the employer part
   of the social insurance as well. But as usual for the income tax
   the emplyee part of social insurance gets mostly subtracted before
   calculating the taxes. &#40;otherwise the employee would have to pay taxes
   for the social fees which would be kinda strange&#41;.&quot;
  &#91;salary&#93;
  &#40;let &#91;employee-fees &#40;+ 
                        &#40;health-insurance-fee-employee salary&#41;
                        &#40;pension-insurance-fee-employee salary&#41;
                        &#40;unemployment-insurance-fee-employee salary&#41;&#41;
        employer-fees &#40;+ 
                        &#40;health-insurance-fee-employer salary&#41;
                        &#40;pension-insurance-fee-employer salary&#41;
                        &#40;unemployment-insurance-fee-employer salary&#41;&#41;&#93;
    &#40;- salary
      employee-fees
      employer-fees
      &#40;income-tax &#40;- salary employee-fees&#41;&#41;&#41;&#41;&#41;

&#40;def possible-working-days
  &#40;- days-per-year
    weekend-days-per-year
    german-holidays-per-year
    work-holidays
    sick-days&#41;&#41;

&#40;def payed-working-days
  &#40;- possible-working-days
    &#40;&#42; possible-working-days education-proportion&#41;
    &#40;&#42; possible-working-days non-productive-work-proportion&#41;&#41;&#41;

&#40;def total-expenses
  &#40;reduce 
    &#40;fn &#91;sum &#91;&#95; interval amount&#93;&#93;
      &#40;+ sum
        &#40;if &#40;= :monthly interval&#41;
          &#40;&#42; 12 amount&#41;
          amount&#41;&#41;&#41;
    0
    expenses&#41;&#41;

&#40;defn total-income
  &#91;working-days hourly-rate&#93;
  &#40;&#42; working-days 8 hourly-rate&#41;&#41;

&#40;defn -%
  &quot;Remove the given percentage of the given amount.&quot;
  &#91;amount percent&#93;
  &#40;&#42; amount &#40;- 1.0 percent&#41;&#41;&#41;

&#40;-&gt; &#40;total-income payed-working-days low-hourly-rate&#41;
  &#40;- total-expenses&#41;
  &#40;-% revenue-reserve-proportion&#41;
  &#40;freelancer-salary-gross-&gt;net&#41;
  &#41; ; &#126;&gt; 18.000€ salary

;; increase the hourly rate to 80€
&#40;-&gt; &#40;total-income payed-working-days 80&#41;
  &#40;- total-expenses&#41;
  &#40;-% revenue-reserve-proportion&#41;
  &#40;freelancer-salary-gross-&gt;net&#41;
  &#41; ; &#126;&gt; 31.000€ net salary

;; increase the hourly rate to 108€
&#40;-&gt; &#40;total-income payed-working-days 108&#41;
  &#40;- total-expenses&#41;
  &#40;-% revenue-reserve-proportion&#41;
  &#40;freelancer-salary-gross-&gt;net&#41;
  &#41; ; &#126;&gt; 43.000€ net salary

</code></pre>]]>
    </content>
  </entry>
  <entry>
    <id>https://blog.7tupel.net/state-of-webapps.html</id>
    <link href="https://blog.7tupel.net/state-of-webapps.html"/>
    <title>The State of Webapps</title>
    <updated>2023-08-13T23:59:59+00:00</updated>
    <content type="html">
      <![CDATA[<p>Modern webapps are complex. To reduce the complexity it's a common abstraction to split them into a client side application that runs in the browser and a server side application running in the mysterious cloud. This abstraction is very rough and does increasingly often not fit reality. More and more frameworks keep growing that promise to be a full-stack client and server solution to build webapps and boundaries between client and server get blurry. This trend does not only promise quicker and cheaper development cycles but it also follows the idea to write code once and run it everywhere. In the domain of webapps, Javascript and derivates like Typescript became the language of choice because they can be run both in the web browser and on the server side. They are also capable to build native mobile apps with the same full stack frameworks that are used to build the server side application and the webapp.</p><p>I don't like the idea to write code once and run it everywhere. I don't like the idea to use a single framework to build an application for very different target platforms.</p><p>Using a single language, framework and code base seems very appealing in the beginning and for very small and limited applications this approach is very fine. But the larger an application grows the more complex it will become. Being able to run the application on more than one target platform with "no worries about how to manage and sync state" adds even more complexity. </p><h2>Going Data Driven</h2><p>When a new product is planned, the choice which language and frameworks will be used is often driven by keeping down cost, getting a short time to marked, the current trends of technology and availability of developers already familiar with the technologies. All of those reasons are very understandable and they should not just get disregarded. Yet they will many times end up in choosing the technologies I described above with their limitations and problems.</p><p>When building a new product - or rather any software driven product - the focus should lay on what the product does. And in almost all cases the answer can be broken down to "read data, process it, present the result, repeat".</p><p>With this rather trivial insight I would suggest to build the product with the data as the smallest building block. Ensure the data is treated the same way in all parts of the application. This applies to the technical representation of the data and also on how to fetch and change it.</p><h2>State and Data Consistency</h2><p>A colleague of mine wrote a blog article about the <a href='https://gerroden.github.io/frontend-architecture-blueprint/'>Frontend Architecture</a> of modern webapps and he states, that many of the techniques learned in the past years in software development on the server is simply dropped and forgotten when looking on how we build modern frontends. And he is right. Presentation, data fetching, local state, data processing, etc. is all mangled together and the worst of these problems probably being bad state management. Assuming the webapp is build using a library like react, state can be placed and managed inside a UI-Component, get passed down from a parent UI-Component or placed into some (more or less) global state container. </p><p>This necessarily leads to problems like the following:</p><ul><li><strong>State Leaks</strong>: Depending on the scope of the state, UI-Components may receive unnecessary updates or updates are lost.</li><li><strong>Performance Problems</strong>: Nested states can trigger new and expensive computations or data fetching. This is especially problematic in deeply nested UI-Component trees.</li><li><strong>Unclear Responsibilities</strong>: With shared state, the responsibility of changing the state can become unclear. Child UI-Components may or may not update state. Worst case, state updates could override each other leading to data inconsistency.</li><li><strong>Complex Code</strong>: With state and state manipulation logic distributed throughout the code base, the code becomes difficult to read, understand and maintain.</li><li><strong>User Experience</strong>: As a result the user experience can degrade badly due to unnecessary reloads or waiting for data fetching.</li></ul><p>Based on these problems it is clear that the how and where state is placed, accessed and changed needs a clear structure. But when talking about state, let's not forget the very simple fact that state is just data. </p><h2>The Web After Tomorrow</h2><p>Nikita Prokopov describes the pain points of data management and his idea of a modern architecture that would solve at least some of the challenges in his blog post <a href='https://tonsky.me/blog/the-web-after-tomorrow/'>The web after tomorrow</a>. To quickly summarize the key ideas of the <i>web after tomorrow</i> related to the problem of state management, data and how we manipulate it should be consistent for a software system.</p><p>Most traditional webapps poll the server for some piece of data, i.e. using a REST-like API request. The server then processes the request (authentication, authorization, input validation) and collects the data (i.e. from a database system) and sends it back to the client by transforming the data into JSON or a similar on the wire format. The client (the webapp) takes the data, decodes and transforms it into a local format (i.e. objects, arrays, scalars) and presents the data to the user. In the same way, a client can send a request with some arguments to the server to update data. Again the server will process the request and write data to the database. </p><p>With this conventional approach data can become inconsistent very easily. For example, a modern webapp might have several elements that require their own datasets. Following the idea of data encapsulation and responsibilities as modeled in the Object Oriented paradigm - many modern webapps are build using this principle - , each of those elements will fetch and manage their data independently. This works well as long as data does not overlap between the different elements. If one element fetches data periodically, it might has received a newer version of the data from the server than another element which has fetched the data only once it was added to the DOM. Or as another example, a webapp might have a top level navigation bar with a widget showing the name and profile picture of the user. Another element of the webapp is a form to update the user information. When a user updates his profile picture using the form, the element inside the navigation bar will not automatically get updated because it only fetched the profile picture once it was mounted, effectively introducing inconsistent data in the webapp.</p><p>There are of cause several options to go on with the problem and in the example of the user's profile picture the data inconsistency might be considered non critical. Implementing some kind of update mechanism would be surely possible. I.e. the development team could add a message bus and each element of the webapp can subscribe to messages that might inform them to update their data. But this would be complex since both elements that change data must send a message to the bus and other elements must subscribe to it. And even if no subscription is missing and all events are correctly put onto the bus, the user profile image element would need to fetch the new picture from a server resulting in unnecessary requests and the update to that element would always be late. </p><p><figure>   <img src="assets/posts/state-of-webapps/data-layers.png" alt="A top-down view of the data layers in the model of the web after tomorrow" style="max-width:100%;"/>   <figcaption>Figure 1 - The Web After Tomorrow data layers - © by Nikita Prokopov</figcaption> </figure></p><p>Nikita suggests two simple ideas to avoid the problems. He proposes a hierarchy of top-down layered data views as described in <i>Figure 1</i>. The single source of truth, i.e. the database, contains all data relevant for the software system. On top of this data, several layers of filtering happens and trough these layers each client has its own view on the data available to this client. This filtering can for example include per tenant filtering and access control filters but also filters that are requested by the client itself (i.e. something like pagination). </p><p>The second piece is a unified mechanism to fetch and update data. Instead of encapsulating state and the logic to manipulate state in an Object Oriented style inside of the elements of the webapp, each element is kept stupid. The webapp is build with a single global data store and a single function exists to update the data. Changes are persisted in the data store and synced to the server. </p><p><i>The details of the data management mechanism are complex and will require an article for itself some time in the future</i>.</p><h2>Final Thoughts</h2><p>Using this approach would allow us developers to build high quality webapps that are easy to maintain and extend. While the initial complexity of creating software systems this way might seem high at first, it will reduce complexity a lot even on short term.</p><p>I will write about the details of how such a system can be build and how the unified data management mechanism might look like in a future article.</p><h2>Sources and Related Work</h2><ul><li><a href='https://curtclifton.net/papers/MoseleyMarks06a.pdf'>Out of the Tar Pit</a> - Mosley and Marks</li><li><a href='https://gerroden.github.io/frontend-architecture-blueprint/'>Frontend Architecture Blueprint</a> - Lars-Erik Kimmel</li><li><a href='https://tonsky.me/blog/the-web-after-tomorrow/'>The web after tomorrow</a> - Nikita Prokopov</li><li><a href='https://www.juxt.pro/blog/atomic-architecture/'>Atomic Architecture</a> - Malcolm Sparks</li></ul><h2>Glossary</h2><p><dl>   <dt><strong>Container</strong></dt>   <dd>A <i>Container</i> is a separately runnable/deployable unit that executes code or stores data. See <a href='https://c4model.com/#ContainerDiagram'>C4 Model</a></dd>   <dt><strong>Component</strong></dt>   <dd>A <i>Component</i> is a grouping of related functionality encapsulated behind a well-defined interface. See <a href='https://c4model.com/#ComponentDiagram'>C4 Model</a></dd>   <dt><strong>UI-Component</strong></dt>   <dd><i>UI-Components</i> let you split the UI into independent, reusable pieces. Can be thought as a synonym of a Component in React or Vue.</dd> </dl> <br /></p>]]>
    </content>
  </entry>
</feed>
